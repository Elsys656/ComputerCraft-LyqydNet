routeTable = {}
daemonTable = {}
socketTable = {}
networkDaemonWakeup = nil
local modemSide

function netInit (_side)
	--initialize network communications
	if daemonTable["netd"] then
		local open = false
		if not _side then
			for n,side in pairs(rs.getSides()) do
				if peripheral.getType(side) == "modem" then
					modemSide = side
					rednet.open(side)
					open = true
					break
				end
			end
		else
			modemSide = _side
			rednet.open(_side)
			open = true
		end
		--keep in mind that netd must be an exception since packets coming to it do not always have route numbers yet.
		if open then coroutine.resume(daemonTable["netd"], 0, "SI:announce") end
	end
	return false
end

function daemonAdd (dName, dFunction, socket)
	if socket then socketTable[tonumber(socket)] = dName end
	daemonTable[dName] = coroutine.create(dFunction)
	coroutine.resume(daemonTable[dName], 0, "SI", "start")
end

function daemonRemove (dName)
	if daemonTable[dName] then
		for sNum, sInfo in pairs(socketTable) do
			if sInfo == dName then
				sNum = nil
			end
		end
		daemonTable[dName] = nil
		return true
	else
		return false
	end
end

function routeFromName (name)
	for rNum,rInfo in ipairs(routeTable) do
		if rInfo and rInfo.name == tostring(name) then return rNum end
	end
	return false
end

function routeFromCID (compID)
	for rNum,rInfo in ipairs(routeTable) do
		if rInfo and rInfo.idNum == tonumber(compID) then return rNum end
	end
	return false
end

function nameFromRoute (route)
	if routeTable[route] then
		return routeTable[route].name
	else
		return false
	end
end

function CIDFromRoute (route)
	if routeTable[route] then
		return routeTable[route].idNum
	else
		return false
	end
end

function send(pack)
	local routeNum = net.routeFromCID(pack.destination)
	if routeNum then
		local route = net.routeTable[routeNum]
		if route.cost > 0 then
			return peripheral.call(net.modemSide, "transmit", route.gateway, os.computerID(), pack:encapsulate())
		else
			return peripheral.call(net.modemSide, "transmit", route.idNum, os.computerID(), pack:tostring())
		end
	end
	return false
end

function packet_send (pType, routeNum, message)
	routeNum = tonumber(routeNum)
	if routeTable[routeNum] then
		if routeTable[routeNum].gateway ~= 0 then
			return peripheral.call(modemSide, "transmit", routeTable[routeNum].gateway, os.computerID(), "PF:"..routeTable[routeNum].idNum..","..os.computerID().."<"..pType..":"..tostring(message)..">")
		end
		if routeTable[routeNum].type == "T" then
			coroutine.resume(daemonTable.netd, 0, "turtlepacket>"..routeTable[routeNum].idNum.." "..pType..":"..tostring(message))
		end
		return peripheral.call(modemSide, "transmit", routeTable[routeNum].idNum, os.computerID(), pType..":"..tostring(message))
	else return false end
end

function raw_send (id, message)
	return peripheral.call(modemSide, "transmit", id, os.computerID(), message)
end

function add_route (idNumber, compType, compName, gateway, cost)
	idNumber = tonumber(idNumber)
	compType = tostring(compType)
	compName = tostring(compName)
	if gateway then
		gateway = tonumber(gateway)
	else
		gateway = 0
	end
	if cost then
		cost = tonumber(cost)
	else
		cost = 0
	end
	for rNum,rInfo in ipairs(routeTable) do
		if rInfo then
			if idNumber == rInfo.idNum then
				if rInfo.type ~= compType then
					rInfo.type = compType
				end
				if rInfo.cost > cost then
					rInfo.gateway = gateway
					rInfo.cost = cost
				end
				return rNum
			end
		end
	end
	local route = {}
	route.idNum = idNumber
	route.type = compType
	route.name = compName
	route.gateway = gateway
	route.cost = cost
	table.insert(routeTable, route)
	return #routeTable
end

function remove_route (route)
	if route then
		local file = io.open("/etc/hosts", "w" )
		if file then
			for rNum, rInfo in ipairs(routeTable) do
				if rNum ~= route then
					file:write(rInfo.idNum..":"..rInfo.gateway..","..rInfo.cost..";"..rInfo.type.." "..rInfo.name.."\n")
				end
			end
			file:close()
		end
		routeTable[route] = false
	end
end

function message(id, msg, dist)
	local packetType, inSocket, foreignSocket, body
	if msg then
		--packetType must be grabbed separately, as forwared packets do not follow the same structure.
		packetType = string.sub(msg, 1, 2)
		inSocket = string.match(msg, "^%a%a:(%d+),%d+;")
	end
	if packetType == "PF" or packetType == "PC" then
		if tonumber(string.match(msg, ":(%d+),%d+<")) == os.computerID() then
			if packetType == "PC" then rednet.send(id, "PS:4,4;".. msg) else rednet.send(id, "HK:4,4;"..msg) end
			os.queueEvent("rednet_message", string.match(msg, ":%d+,(%d+)<"), string.match(msg, "<(.*)>"), false)
			return false
		else
			os.queueEvent("socket_inbound", 4, id, msg, false)
			return false
		end
	elseif packetType == "HA" or packetType == "HT" or packetType == "HI" then
		if daemonTable.netd then
			coroutine.resume(daemonTable.netd, id, msg)
		end
	elseif packetType == "RM" then
		return id, string.match(msg, "RM:(.*)"), dist
	else
		--if the string.match failed, assume this is not a LyqydNet packet.
		if not inSocket then return id, msg, dist end
		os.queueEvent("socket_inbound", inSocket, id, msg, dist)
		return false
	end
end
