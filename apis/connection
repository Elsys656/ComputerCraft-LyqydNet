connectionTable = {}

local function getPort()
	local validPort = false
	local portChoice = 51
	while not validPort do
		if net.socketTable[portChoice] then
			portChoice = portChoice + 1
		else
			net.socketTable[portChoice] = coroutine.running()
			validPort = true
		end
	end
	return portChoice
end

local Connection = {
	newPacket = function(self, pType, message)
		return packet.new(pType, self.remote, message, self.remoteport, self.localport)
	end,
	open = function(self, timeout)
		if self.state ~= "open" then
			self.localport = getPort()
			net.send(self:newPacket("SQ", "connect"))
			self.state = "open_wait"
			local response = self:listen(timeout)
			if response and response.pType == "SR" then
				self.state = "open"
				return response.payload
			else
				self.state = "closed"
				return false
			end
		end
	end,
	send = function(self, pType, message)
		if self.state == "open" then
			local packetType = pType
			if pType:len() > 2 then
				if packet.types[pType] then packetType = packet.types[pType] else return false end
			end
			local pack = self:newPacket(packetType, message)
			return net.send(pack)
		else return false end
	end,
	listen = function(self, timeout)
		if self.state == "open" or self.state == "open_wait" then
			local timer
			if timeout then timer = os.startTimer(timeout) end
			while true do
				local event = {os.pullEvent()}
				if event[1] == "lyqydnet_packet" then
					--be really sure the packet is intended for us.
					if event[2].toSock == self.localport and event[2].fromSock == self.remoteport and event[2].origin == self.remote and event[2].destination == os.computerID() then
						return event[2]
					end
				elseif event[1] == "timer" and timeout and event[2] == timer then
					return false
				end
			end
		else return false end
	end,
	close = function(self, message, quiet)
		if self.state == "open" then
			if quiet ~= true then
				local pack = self:newPacket("SC", message or "disconnect")
				net.send(pack)
			end
			--must explicitly compare to true so that a string value will not evaluate as also true.
			if net.socketTable[self.localport] == true then net.socketTable[self.localport] = nil end
			self.state = "closed"
			return true
		else return false end
	end,
	isTurtle = function(self)
		if net.routeTable[self:route()].type == "T" then return true else return false end
	end,
	name = function(self)
		return net.nameFromRoute(self:route())
	end,
	route = function(self)
		return net.routeFromCID(self.remote)
	end,
	destroy = function(self)
		for cNum, cInfo in pairs(connection.connectionTable) do
			if cInfo == self then
				table.remove(connection.connectionTable, cNum)
			end
		end
	end,
}

local cmetatable = {__index = Connection}

function new(destination, port, localport)
	local instance = {
		--get a local port when opening the connection unless specified.
		localport = localport,
		remoteport = port,
		remote = destination,
		state = "new",
	}
	local dType, dValue = string.match(destination, "^(%a):(.*)")
	if dType == "i" then
		instance.destination = dValue
	elseif dType == "r" then
		instance.destination = net.CIDFromRoute(dValue)
	elseif destination then
		instance.destination = net.CIDFromRoute(net.routeFromName(destination))
	end
	--if a local port is specified, assume that the connection is already open.
	if localport then instance.state = "open" end
	setmetatable(instance, cmetatable)
	table.insert(connection.connectionTable, instance)
	return instance
end

--searches for a connection matching inbound packet details.
function find(pack)
	for cNum, cInfo in pairs(connection.connectionTable) do
		if cInfo.remote == pack.origin and cInfo.remoteport == pack.fromSock and cInfo.localport == pack.toSock then
			return cNum, cInfo
		end
	end
	return false
end

function listen(port, timeout)
	local timer
	if timeout then timer = os.startTimer(timeout) end
	while true do
		local event = {os.pullEvent()}
		if event[1] == "lyqydnet_packet" then
			if event[2].toSock == port and event[2].destination == os.computerID() then
				local found, conn = connection.find(event[2])
				if found then
					return event[2], conn
				else
					return event[2], connection.new(event[2].origin, event[2].fromSock, event[2].toSock)
				end
			end
		elseif event[1] == "timer" and timeout and event[2] == timer then
			return false
		end
	end
end
