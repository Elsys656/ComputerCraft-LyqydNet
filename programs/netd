local function readHosts()
	if fs.exists("/etc/hosts") then
		local file = io.open("/etc/hosts", "r" )
		local line = file:read()
		while line do
			net.add_route(string.match(line, "(%d+):"), string.match(line, ";([CTR]) "), string.match(line, ";[CTR] (%w+)"), string.match(line, ":(%d+),"), string.match(line, ",(%d+);"))
			line = file:read()
		end
		file:close()
	elseif not fs.isDir("/etc") then
		fs.makeDir("/etc")
	end
end

local function saveHosts()
	local file = io.open("/etc/hosts", "w" )
	if file then
		for rNum, rInfo in ipairs(net.routeTable) do
			if rInfo then
				file:write(rInfo.idNum..":"..rInfo.gateway..","..rInfo.cost..";"..rInfo.type.." "..rInfo.name.."\n")
			end
		end
		file:close()
		return true
	end
	return false
end

local routing, longlink, forwardTable, endpointTable, infoWaitTable = false, false, {}, {}, {}

function netDaemon()
	netdExit = false
	readHosts()
	while not netdExit do
		local id, packet = coroutine.yield()
		local packetType = string.sub(packet, 1, 2)
		if packetType == "HA" then
			local newRoute = net.add_route(id, string.match(packet, ";([CTR]) "), string.match(packet, ";[CTR] (%w+)"), 0, 0)
			saveHosts()
			if routing then
				local string = os.computerID()..":0,0;R "..os.getComputerLabel()..">"
				for rNum, rInfo in ipairs(net.routeTable) do
					if rInfo and rNum ~= newRoute then
						string = string..rInfo.idNum..":"..os.computerID()..","..(rInfo.cost + 1)..";"..rInfo.type.." "..rInfo.name..">"
					end
				end
				net.packet_send("HT", newRoute, "4,4;"..string)
				for rNum, rInfo in ipairs(net.routeTable) do
					if rInfo and rInfo.type == "R" and rNum ~= newRoute then
						string = net.routeTable[newRoute].idNum..":"..os.computerID()..","..(net.routeTable[newRoute].cost + 1)..";"..net.routeTable[newRoute].type.." "..net.routeTable[newRoute].name
						net.packet_send("HI", rNum, "4,4;"..string)
					end
				end
				--if the computer coming online was a router that didn't respond to a forwarded packet, forward the packet again.
				for pNum, pContents in ipairs(forwardTable) do
					if pContents.dest == id then
						rednet.send(id, pContents.data)
					end
				end
			end
		elseif packetType == "HI" then
			local routeNum = net.add_route(string.match(packet, "HI:4,4;(%d+):"), string.match(packet, ";([CTR]) "), string.match(packet, ";[CTR] (%w+)"), string.match(packet, "%d+:(%d+),"), string.match(packet, "%d+:%d+,(%d+);"))
			if routing then
				for _, host in ipairs(infoWaitTable) do
					if tonumber(string.match(packet, "%d+:(%d+),")) == host then
						table.remove(infoWaitTable, _)
						local string = "4,4;"..net.routeTable[routeNum].idNum..":"..os.computerID()..","..(net.routeTable[routeNum].cost + 1)..";"..net.routeTable[routeNum].type.." "..net.routeTable[routeNum].name
						for rNum, rInfo in ipairs(net.routeTable) do
							if rInfo and rInfo.type ~= "R" and rInfo.idNum ~= host then
								net.packet_send("HC", rNum, string)
							end
						end
						break
					end
				end
			end
		elseif packetType == "HC" then
			local routeNum = net.add_route(string.match(packet, "HC:4,4;(%d+):"), string.match(packet, ";([CTR]) "), string.match(packet, ";[CTR] (%w+)"), string.match(packet, "%d+:(%d+),"), string.match(packet, "%d+:%d+,(%d+);"))
			net.routeTable[routeNum].gateway, net.routeTable[routeNum].cost, net.routeTable[routeNum].name = string.match(packet, "%d+:(%d+),"), string.match(packet, "%d+:%d+,(%d+);"), string.match(packet, ";[CTR] (%w+)")
		elseif packetType == "HQ" then
			if (string.match(packet, ";(%a):") == "n" and string.match(packet, ";%a:(%a+)") == os.getComputerLabel()) or (string.match(packet, ";(%a):") == "i" and string.match(packet, ";%a:(%d+)") == os.computerID()) then
				label = os.getComputerLabel()
				packet = "HA:4,4;"
				if turtle then
					packet = packet.."T "..label
				else
					if net.daemonTable.routed then
						packet = packet.."R "..label
					else
						packet = packet.."C "..label
					end
				end
				rednet.send(id, packet)
			elseif routing then
				if string.match(packet, ";(%a):") == "n" then
					for rNum, rInfo in ipairs(net.routeTable) do
						--find the computer in question in our routing table and attempt to send it a packet.
						if rInfo and string.match(packet, ";%a:(%a+)") == rInfo.name then
							rednet.send(rInfo.idNum, packet)
							net.remove_route(rNum)
							break
						end
					end
				elseif string.match(packet, ";(%a):") == "i" then
					--if we have the ID, just send the packet.
					rednet.send(tonumber(string.match(packet, ";%a:(%d+)")), packet)
					net.remove_route(net.routeFromCID(string.match(packet, ";%a:(%d+)")))
				end
			else
				if string.match(packet, ";(%a):") == "n" then
					net.remove_route(net.routeFromName(string.match(packet, ";%a:(%a+)")))
				elseif string.match(packet, ";(%a):") == "i" then
					net.remove_route(net.routeFromCID(string.match(packet, ";%a:(%d+)")))
				end
			end
		elseif packetType == "HR" then
			--host removal.
			local routeNum = net.routeFromCID(string.match(packet, ";(%d+)"))
			if routeNum then
				net.remove_route(routeNum)
				for cNum, cInfo in pairs(connection.connectionTable) do
					if cInfo.route == routeNum then
						connection.connectionTable[cNum] = false
					end
				end
				if routing then
					for rNum, rInfo in ipairs(net.routeTable) do
						if rInfo and rInfo.cost == 0 and rInfo.type ~= "R" then
							--send HR packet to all close non-routers.
							rednet.send(rInfo.idNum, packet)
							break
						end
					end
				end
			end
			saveHosts()
		elseif packetType == "HT" then
			for s in string.gmatch(packet, "(%d+:%d+,%d+;[CTR] %w+)>") do
				net.add_route(string.match(s, "(%d+):"), string.match(s, ";([CTR]) "), string.match(s, ";[CTR] (%w+)"), string.match(s, ":(%d+),"), string.match(s, ",(%d+);"))
			end
			saveHosts()
		elseif routing and (packetType == "PF" or packetType == "PC") then
			local destination = tonumber(string.match(packet, ":(%d+),%d+<"))
			local routeFound = false
			local oldPacket = packet
			for rNum, rInfo in ipairs(net.routeTable) do
				if rInfo and rInfo.idNum == destination then
					if rInfo.cost ~= 0 then destination = rInfo.gateway end
					if string.match(packet, "P[FC]:%d+,%d+<(H[IC]):") then
						--These are host information packets, we must manipulate them as we send them onward so that the routing information is accurate.
						local head, gateway, cost, tail = string.match(packet, "(P[FC]:%d+,%d+<H[IC]:%d+,%d+;%d+):(%d+),(%d+);([CTR] %a+>)")
						gateway = os.computerID()
						cost = cost + 1
						packet = head..":"..gateway..","..cost..";"..tail
					end
					if longlink then
						packet = "PC"..string.match(packet, "P[FC](:.*)")
						table.insert(forwardTable, {dest = destination, data = packet})
					else
						packet = "PF"..string.match(packet, "P[FC](:.*)")
					end
					if packetType == "PC" then
						rednet.send(id, "PS:"..oldPacket)
					end
					if rInfo.cost == 0 then
						--if this is an endpoint, add the packet to the table to await confirmation.
						table.insert(endpointTable, {dest = destination, data = packet})
						net.networkDaemonTimeout = os.startTimer(2)
					end
					rednet.send(destination, packet)
					routeFound = true
				end
			end
			if not routeFound then net.packet_send("RR", net.routeFromCID(id), "4,4;"..string.match(packet, ":(%d+,%d+)<")..";not_found") end
		elseif packetType == "PS" then
			for pNum, pContents in ipairs(forwardTable) do
				if pContents.data == string.match(packet, "PS:4,4;(.*)") then
					table.remove(forwardTable, pNum)
					break
				end
			end
			for pNum, pContents in ipairs(endpointTable) do
				if pContents.data == string.match(packet, "PS:4,4;(.*)") then
					table.remove(endpointTable, pNum)
					break
				end
			end
		elseif packetType == "HK" then
			for pNum, pContents in ipairs(endpointTable) do
				if pContents.data == string.match(packet, "HK:4,4;(.*)") then
					table.remove(endpointTable, pNum)
					break
				end
			end
		elseif packetType == "SI" then
			local instruction = string.match(packet, ":(%w+)")
			if instruction == "stop" then
				saveHosts()
				if routing and #forwardTable > 0 then
					local file = io.open( "etc/packets", "w" )
					if file then
						for pNum, pContents in ipairs( forwardTable ) do
							file:write( pContents.dest..">"..pContents.data.."\n" )
						end
						file:close()
					end
				end
				netdExit = true
			elseif instruction == "route" then
				routing = true
				if fs.exists( "etc/packets" ) then
					local file = io.open( "etc/packets", "r" )
					local sLine = file:read()
					while sLine do
						table.insert(forwardTable, {dest = string.match(sLine, "(%d+)>.*"), data = string.match(sLine, "%d+>(.*)")})
						sLine = file:read()
					end
					file:close()
				end
			elseif instruction == "longlink" then
				longlink = true
			elseif instruction == "announce" then
				local packet = "HA:4,4;"
				local label = os.getComputerLabel()
				if label then
					if turtle then
						packet = packet.."T "..label
					else
						if routing then
							packet = packet.."R "..label
						else
							packet = packet.."C "..label
						end
					end
					rednet.broadcast(packet)
				end
			elseif string.match(instruction, "(%a+)>") == "turtlepacket" then
				table.insert(endpointTable, {dest = string.match(instruction, ">(%d+) "), data = string.match(instruction, ">%d+ (.*)")})
				net.networkDaemonTimeout = os.startTimer(2)
			elseif instruction == "timeout" then
				for hNum, hContents in ipairs(infoWaitTable) do
					for rNum, rInfo in ipairs(net.routeTable) do
						if rInfo and rInfo.type ~= "R" then
							net.packet_send("HR", rNum, "4,4;"..tostring(hContents))
						end
					end
				end
				infoWaitTable = {}
				for pNum, pContents in ipairs(endpointTable) do
					for rNum, rInfo in ipairs(net.routeTable) do
						if rInfo and rInfo.type == "R" then
							net.packet_send("HQ", rNum, "4,4;i:"..pContents.dest)
						end
					end
					rednet.send(pContents.dest, "HQ:4,4;i:"..pContents.dest)
					net.remove_route(net.routeFromCID(pContents.dest))
					table.insert(infoWaitTable, pContents.dest)
					net.networkDaemonTimeout = os.startTimer(2)
				end
				endpointTable = {}
			end
		end
	end
end

net.daemonAdd("netd", netDaemon, 4)
